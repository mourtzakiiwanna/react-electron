[{"C:\\Users\\mourt\\react-electron\\src\\index.js":"1","C:\\Users\\mourt\\react-electron\\src\\App.js":"2","C:\\Users\\mourt\\react-electron\\src\\FilesViewer.js":"3","C:\\Users\\mourt\\react-electron\\src\\Icons.js":"4","C:\\Users\\mourt\\react-electron\\src\\Home.js":"5","C:\\Users\\mourt\\react-electron\\src\\AddFieldsPage.js":"6","C:\\Users\\mourt\\react-electron\\src\\AddInheritancePage.js":"7","C:\\Users\\mourt\\react-electron\\src\\AddSchemePage.js":"8","C:\\Users\\mourt\\react-electron\\src\\Prototype.js":"9","C:\\Users\\mourt\\react-electron\\src\\ValueContext.js":"10","C:\\Users\\mourt\\react-electron\\src\\AddNamePage.js":"11","C:\\Users\\mourt\\react-electron\\src\\CustomAlert.js":"12","C:\\Users\\mourt\\react-electron\\src\\reportWebVitals.js":"13","C:\\Users\\mourt\\react-electron\\src\\SideMenu.js":"14","C:\\Users\\mourt\\react-electron\\src\\LocalPrototypes.js":"15","C:\\Users\\mourt\\react-electron\\src\\CorePrototypes.js":"16","C:\\Users\\mourt\\react-electron\\src\\HomePage.js":"17"},{"size":424,"mtime":1693828845789,"results":"18","hashOfConfig":"19"},{"size":3061,"mtime":1696699977696,"results":"20","hashOfConfig":"19"},{"size":807,"mtime":1693823961749,"results":"21","hashOfConfig":"19"},{"size":1325,"mtime":1693824092947,"results":"22","hashOfConfig":"19"},{"size":3756,"mtime":1694344461678,"results":"23","hashOfConfig":"19"},{"size":3994,"mtime":1693133636705,"results":"24","hashOfConfig":"19"},{"size":3026,"mtime":1693133632539,"results":"25","hashOfConfig":"19"},{"size":2062,"mtime":1693133626821,"results":"26","hashOfConfig":"19"},{"size":20437,"mtime":1696703447965,"results":"27","hashOfConfig":"19"},{"size":417,"mtime":1693045414065,"results":"28","hashOfConfig":"19"},{"size":5061,"mtime":1696704611375,"results":"29","hashOfConfig":"19"},{"size":191,"mtime":1693206392837,"results":"30","hashOfConfig":"19"},{"size":362,"mtime":1693821786864,"results":"31","hashOfConfig":"19"},{"size":4895,"mtime":1696680008467,"results":"32","hashOfConfig":"19"},{"size":1268,"mtime":1694340593518,"results":"33","hashOfConfig":"19"},{"size":1274,"mtime":1694340648791,"results":"34","hashOfConfig":"19"},{"size":2006,"mtime":1696703411422,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"j2gtvp",{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"38"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"38"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"38"},"C:\\Users\\mourt\\react-electron\\src\\index.js",[],["80","81"],"C:\\Users\\mourt\\react-electron\\src\\App.js",["82","83","84","85","86","87","88"],"import { useState, useMemo } from 'react';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport Home from './HomePage'; // Import the Home component\nimport './css/App.css';\nimport Prototype from \"./Prototype\";\nimport Local from \"./LocalPrototypes\";\nimport Core from \"./CorePrototypes\";\nimport SideMenu from \"./SideMenu\";\n\nimport { ValueContextProvider } from './ValueContext'; // Import your ValueContextProvider\nimport AddNamePage from './AddNamePage';\nimport AddInheritancePage from './AddInheritancePage';\nimport AddFieldsPage from './AddFieldsPage';\nimport AddSchemePage from './AddSchemePage';\nimport Typography from '@mui/material/Typography';\n\n// Check if the code is running in Electron\nconst isElectron = window.require && window.require('@electron/remote');\n\nconst fs = isElectron ? window.require('fs') : null;\nconst pathModule = isElectron ? window.require('path') : null;\n\nconst { app } = isElectron ? window.require('@electron/remote') : { app: null };\n\nconst formatSize = size => {\n  var i = Math.floor(Math.log(size) / Math.log(1024));\n  return (\n    (size / Math.pow(1024, i)).toFixed(2) * 1 +\n    ' ' +\n    ['B', 'kB', 'MB', 'GB', 'TB'][i]\n  );\n};\n\nfunction App() {\n  const [path, setPath] = useState(isElectron ? app.getAppPath() : '');\n\n  const files = useMemo(\n    () =>\n      isElectron\n        ? fs\n            .readdirSync(path)\n            .map(file => {\n              const stats = fs.statSync(pathModule.join(path, file));\n              return {\n                name: file,\n                size: stats.isFile() ? formatSize(stats.size ?? 0) : null,\n                directory: stats.isDirectory()\n              };\n            })\n            .sort((a, b) => {\n              if (a.directory === b.directory) {\n                return a.name.localeCompare(b.name);\n              }\n              return a.directory ? -1 : 1;\n            })\n        : [], // Empty array if not in Electron\n    [path]\n  );\n\n  const onBack = () => setPath(pathModule.dirname(path));\n  const onOpen = folder => setPath(pathModule.join(path, folder));\n\n  const [searchString, setSearchString] = useState('');\n\n  // Filter files only if in Electron\n  const filteredFiles = isElectron\n    ? files.filter(s => s.name.startsWith(searchString))\n    : [];\n\n  return (\n    <Router>\n      <div>\n       \n        <ValueContextProvider>\n        <Routes>\n          <Route path=\"/\" element={<Home />} />\n          <Route path=\"/local\" element ={<Local />} />\n          <Route path=\"/core\" element ={<Core />} />\n          <Route path=\"/prototype/:groupName/:prototypeName\" element ={<Prototype />} />\n          <Route path=\"/create\" element={<AddNamePage />} />\n          <Route path=\"/add-inheritance\" element={<AddInheritancePage />} />\n          <Route path=\"/add-fields\" element={<AddFieldsPage />} />\n          <Route path=\"/add-scheme\" element={<AddSchemePage />} />\n        </Routes>\n      </ValueContextProvider>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n\n\n","C:\\Users\\mourt\\react-electron\\src\\FilesViewer.js",[],["89","90"],"C:\\Users\\mourt\\react-electron\\src\\Icons.js",[],"C:\\Users\\mourt\\react-electron\\src\\Home.js",["91"],"import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './css/App.css';\r\nimport NavigateNextIcon from '@mui/icons-material/NavigateNext';\r\nimport Box from '@mui/material/Stack';\r\n\r\nfunction Home() {\r\n  const groups = [\r\n    { name: 'Local Prototypes', url: 'http://localhost:8080/getLocal' },\r\n    { name: 'Core Prototypes', url: 'http://localhost:8080/getCore' },\r\n    { name: 'Delta Prototypes', url: 'http://localhost:8080/getDelta' },\r\n  ];\r\n\r\n  const [expandedGroup, setExpandedGroup] = useState(null);\r\n  const [groupData, setGroupData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async (url, index) => {\r\n      try {\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n        const formattedData = data.map(name => ({\r\n          formattedName: name.replace(/([A-Z])/g, ' $1'),\r\n          unformattedName: name,\r\n        }));\r\n        setGroupData(prevData => ({ ...prevData, [index]: formattedData }));\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    };\r\n\r\n    groups.forEach((group, index) => {\r\n      if (expandedGroup === index) {\r\n        fetchData(group.url, index);\r\n      }\r\n    });\r\n  }, [expandedGroup]);\r\n\r\n  const handleGroupClick = (index) => {\r\n    if (expandedGroup === index) {\r\n      setExpandedGroup(null);\r\n    } else {\r\n      setExpandedGroup(index);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"center-button\">\r\n        <Link to=\"/create\" className=\"create-button\">\r\n          Create new prototype\r\n        </Link>\r\n      </div>\r\n      {groups.map((group, index) => (\r\n        <div key={index} className=\"group\">\r\n          <div\r\n            className={`group-name ${expandedGroup === index ? 'expanded' : ''}`}\r\n            onClick={() => handleGroupClick(index)}\r\n          >\r\n            {group.name}\r\n          </div>\r\n        \r\n          {expandedGroup === index && (\r\n            <div className=\"group-content\">\r\n              {groupData[index] && (\r\n\r\n                <div>\r\n                    \r\n                  <Box sx={{ alignItems: 'flex-end', margin: '30px' }}>\r\n                    <span className=\"all-local\">\r\n                    <Link to={`/${group.name.toLowerCase().replace(/\\s+/g, '').replace(\"prototypes\",\"\")}` } className='all-local'>\r\n                        All {group.name.toLowerCase().replace(/\\s+/g, '').replace(\"prototypes\",\"\")} prototypes\r\n                      </Link>\r\n                      <NavigateNextIcon />\r\n                    </span>\r\n                  </Box>\r\n  \r\n                  {groupData[index].map((prototype, valueIndex) => {\r\n                    const formattedGroupName = group.name\r\n                    .toLowerCase()\r\n                    .replace(/\\s+/g, '')\r\n                    .replace('prototypes', '');\r\n                    const fullPath = `/prototype/${formattedGroupName}/${prototype.unformattedName}`;\r\n  \r\n                    return (\r\n                      <div className='card'>\r\n                        <Link\r\n                          to={fullPath}\r\n                          key={`${index}-${valueIndex}`}\r\n                          style={{ textDecoration: 'none', background: 'none' }}\r\n                          className='link-card' // Add a class to the Link component for targeting in CSS\r\n                        >\r\n                          <div className='card-details'>{prototype.formattedName}</div>\r\n                        </Link>\r\n                      </div>\r\n                    );\r\n                    \r\n                  })}\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n  \r\n}\r\n\r\nexport default Home;\r\n",["92","93"],"C:\\Users\\mourt\\react-electron\\src\\AddFieldsPage.js",[],"C:\\Users\\mourt\\react-electron\\src\\AddInheritancePage.js",[],"C:\\Users\\mourt\\react-electron\\src\\AddSchemePage.js",[],"C:\\Users\\mourt\\react-electron\\src\\Prototype.js",["94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { Link } from 'react-router-dom';\r\nimport './css/Prototype.css'; // Import your CSS file\r\nimport SideMenu from './SideMenu';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Box from '@mui/material/Box';\r\nimport Stack from '@mui/material/Stack';\r\nimport Grid from '@mui/material/Grid';\r\nimport Switch from '@mui/material/Switch';\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport CheckCircleTwoToneIcon from '@mui/icons-material/CheckCircleTwoTone';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport CheckIcon from '@mui/icons-material/Check';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport DeleteIcon from '@mui/icons-material/DeleteOutlined';\r\nimport SaveIcon from '@mui/icons-material/Save';\r\nimport CancelIcon from '@mui/icons-material/Close';\r\nimport Button from '@mui/material/Button';\r\nimport ToggleButton from '@mui/lab/ToggleButton';\r\nimport ToggleButtonGroup from '@mui/lab/ToggleButtonGroup';\r\nimport TextField from '@mui/material/TextField';\r\nimport Select from '@mui/material/Select';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport OutlinedInput from '@mui/material/OutlinedInput';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport { makeStyles } from '@mui/styles';\r\nimport { SxProps } from '@mui/material/styles';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nimport {\r\n  GridRowModes,\r\n  DataGrid,\r\n  GridToolbarContainer,\r\n  GridActionsCellItem,\r\n  GridRowEditStopReasons,\r\n} from '@mui/x-data-grid';\r\nimport {\r\n  randomCreatedDate,\r\n  randomTraderName,\r\n  randomId,\r\n  randomArrayItem,\r\n} from '@mui/x-data-grid-generator';\r\n\r\nimport NavigateNextIcon from '@mui/icons-material/NavigateNext';\r\n\r\n\r\nfunction Prototype(props) {\r\n  let fID = 0;\r\n  const ITEM_HEIGHT = 48;\r\n  const ITEM_PADDING_TOP = 8;\r\n  const MenuProps = {\r\n    PaperProps: {\r\n      style: {\r\n        maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n        width: 250,\r\n      },\r\n    },\r\n  };\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClickOpen = (id) => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleCloseConfirm = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const dataGridContainerRef = useRef(null);\r\n\r\n  const navigation = useNavigate();\r\n  const { groupName, prototypeName } = useParams();\r\n  const [prototypeInfo, setPrototypeInfo] = useState();\r\n  const [selectedFIeldID, setSelectedFIeldID] = useState();\r\n  const [isFormVisible, setIsFormVisible] = useState(false);\r\n  const [newFieldInfo, setNewFieldInfo] = useState({\r\n    id: '',\r\n    fgId: '',\r\n    valueType: '',\r\n    trans: false,\r\n    array: false,\r\n    constraint: '',\r\n    defaultValue: '',\r\n  });\r\n  const [addInheritance, setAddInheritance] = useState(false);\r\n  const [newInheritance, setNewInheritance] = useState('');\r\n  const [fieldToDelete, setFieldToDelete] = useState('');\r\n  const [initialRows, setInitialRows] = useState([]);\r\n  const [showAllInheritedPrototypes, setShowAllInheritedPrototypes] = useState(false);\r\n\r\n  const fetchData = async () => {\r\n    let fullPath = '';\r\n  \r\n    if (groupName === 'core') {\r\n      fullPath = 'butterfly' + '/' + groupName + '/' + prototypeName;\r\n    } else {\r\n      fullPath = groupName + '/' + prototypeName;\r\n    }\r\n  \r\n    const response = await fetch(`http://localhost:8080/show?prototypePath=/${fullPath}&showSummary=true&showInheritance=true&showFields=true`);\r\n    const data = await response.json();\r\n    setPrototypeInfo(data);\r\n  \r\n    // Map prototypeInfo fields to initialRows\r\n    const mappedFields = data.fields.map((field) => ({\r\n      id: field.id,\r\n      fieldId: field.id,\r\n      attributeType: field.attributeType,\r\n      constraints: field.constraints || '',\r\n    }));\r\n    \r\n    setInitialRows(mappedFields);\r\n    setRows(mappedFields); // Initialize 'rows' with data from 'initialRows'\r\n  };\r\n  \r\n\r\n\r\n\r\n      // Set initialRows\r\n\r\n  const handleToggleForm = () => {\r\n    setIsFormVisible(!isFormVisible);\r\n  };\r\n\r\n\r\n  const theme = useTheme();\r\n\r\n\r\n\r\n  const handleAddField = async () => {\r\n    try {\r\n\r\n      var fullPath = \"\";\r\n      if (groupName == \"core\") {\r\n        fullPath = \"butterfly\" + \"/\" + groupName + \"/\" + prototypeName;\r\n      } else {\r\n        fullPath = groupName + \"/\" + prototypeName;\r\n      }\r\n      const fieldUrl = `http://localhost:8080/addField?prototypePath=/${fullPath}&id=${newFieldInfo.id}&fgId=${newFieldInfo.fgId}&valueType=${newFieldInfo.valueType}&trans=${newFieldInfo.trans}&array=${newFieldInfo.array}&map=${newFieldInfo.map}&constraint=${newFieldInfo.constraint}&defaultValue=${newFieldInfo.defaultValue}`;\r\n\r\n      const response = await fetch(fieldUrl);\r\n\r\n      if (!response.ok) {\r\n        console.error('Error adding field');\r\n        return;\r\n      }\r\n\r\n      \r\n      fetchData();\r\n    } catch (error) {\r\n      console.error('API call error:', error);\r\n    }\r\n  };\r\n\r\n\r\n  const columns = [\r\n    { field: 'fieldId', headerName: 'Field ID', width: 200, editable: true ,headerClassName: 'super-app-theme--header'  },\r\n    {\r\n      field: 'attributeType',\r\n      headerName: 'Attribute Type',\r\n      width: 200,\r\n      editable: true,\r\n      type: 'singleSelect',\r\n      headerClassName: 'super-app-theme--header',\r\n      valueOptions: ['STANDALONE_FIELD', 'FIELD'],\r\n    },\r\n    { field: 'constraints', headerName: 'Constraints', width: 200, editable: true, headerClassName: 'super-app-theme--header'},\r\n    {\r\n      field: 'actions',\r\n      type: 'actions',\r\n      headerName: '',\r\n      width: 80,\r\n      cellClassName: 'actions',\r\n      getActions: ({ id }) => {\r\n        const isInEditMode = rowModesModel[id]?.mode === GridRowModes.Edit;\r\n\r\n        if (isInEditMode) {\r\n          return [\r\n            <GridActionsCellItem\r\n              icon={<SaveIcon />}\r\n              label=\"Save\"\r\n              sx={{\r\n                color: 'primary.main',\r\n              }}\r\n              onClick={handleSaveClick(id)}\r\n            />,\r\n            <GridActionsCellItem\r\n              icon={<CancelIcon />}\r\n              label=\"Cancel\"\r\n              className=\"textPrimary\"\r\n              onClick={handleCancelClick(id)}\r\n              color=\"inherit\"\r\n            />,\r\n          ];\r\n        }\r\n\r\n        return [\r\n          <GridActionsCellItem\r\n            icon={<EditIcon />}\r\n            label=\"Edit\"\r\n            className=\"textPrimary\"\r\n            onClick={handleEditClick(id)}\r\n            color=\"inherit\"\r\n          />,\r\n          <GridActionsCellItem\r\n            icon={<DeleteIcon />}\r\n            label=\"Delete\"\r\n            onClick={handleDeleteClick(id)}\r\n            color=\"inherit\"\r\n          />,\r\n        ];\r\n      },\r\n    },\r\n  ];\r\n\r\n  const [dropdownOptions, setDropdownOptions] = useState([]);\r\n  const [selectedOption, setSelectedOption] = useState(\"\");\r\n  const [showDropdown, setShowDropdown] = useState(false);\r\n\r\n  const [rows, setRows] = React.useState(initialRows);\r\n  const [rowModesModel, setRowModesModel] = React.useState({});\r\n\r\n  const handleRowEditStop = (params, event) => {\r\n    if (params.reason === GridRowEditStopReasons.rowFocusOut) {\r\n      event.defaultMuiPrevented = true;\r\n    }\r\n  };\r\n\r\n  const handleEditClick = (id) => () => {\r\n\r\n    setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.Edit } });\r\n  };\r\n\r\n\r\n\r\n  const handleDeleteClick = (id) => () => {\r\n    setFieldToDelete(id); // Set the fieldToDelete state with the ID of the field to be deleted\r\n    setOpen(true);\r\n  };\r\n\r\n\r\n  const handleSaveClick = (id) => () => {\r\n    setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.View } });\r\n  };\r\n\r\n  const handleDeleteConfirm = () => {\r\n    console.log(\"Field to delete:\", fieldToDelete);\r\n    setRows(rows.filter((row) => row.fieldId !== fieldToDelete));\r\n    setOpen(false);\r\n  };\r\n  \r\n\r\n  const handleCancelClick = (id) => () => {\r\n    setRowModesModel({\r\n      ...rowModesModel,\r\n      [id]: { mode: GridRowModes.View, ignoreModifications: true },\r\n    });\r\n\r\n    const editedRow = rows.find((row) => row.id === id);\r\n    if (editedRow.isNew) {\r\n      setRows(rows.filter((row) => row.id !== id));\r\n    }\r\n  };\r\n\r\n  const processRowUpdate = (newRow) => {\r\n    const updatedRow = { ...newRow, isNew: false };\r\n    setRows(rows.map((row) => (row.id === newRow.id ? updatedRow : row)));\r\n    return updatedRow;\r\n  };\r\n\r\n  const handleRowModesModelChange = (newRowModesModel) => {\r\n    setRowModesModel(newRowModesModel);\r\n  };\r\n \r\n\r\n  useEffect(() => {\r\n    setShowDropdown(false);\r\n    setIsFormVisible(false);\r\n    setAddInheritance(false);\r\n    setNewInheritance('');\r\n    fetchData(); // Fetch data for the new prototype and initialize 'rows'\r\n  }, [prototypeName, groupName]);\r\n  \r\n  useEffect(() => {\r\n    let groupUrl = \"\";\r\n    if (groupName === \"local\") {\r\n      groupUrl = \"getLocal\";\r\n    } else {\r\n      groupUrl = \"getCore\";\r\n    }\r\n  \r\n    // Fetch dropdown options from the URL when the component mounts\r\n    fetch(`http://localhost:8080/${groupUrl}`) // Use backticks for template literals\r\n      .then((response) => response.json())\r\n      .then((data) => setDropdownOptions(data))\r\n      .catch((error) => console.error(\"Error fetching data:\", error));\r\n  }, [prototypeName, groupName]);\r\n\r\n  const handleDropdownChange = (e) => {\r\n    const selectedValue = e.target.value;\r\n    setSelectedOption(selectedValue);\r\n  };\r\n\r\n  const handleAddInheritanceClick = () => {\r\n    setSelectedOption(null);\r\n    setShowDropdown(true);\r\n  };\r\n\r\n  const handleSaveInheritance = () => {\r\n    setShowDropdown(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setShowDropdown(false);\r\n\r\n  };\r\n\r\n \r\n  useEffect(() => {\r\n    // Add a click event listener to the document\r\n    const handleClickOutside = (event) => {\r\n      if (\r\n        rowModesModel[selectedFIeldID]?.mode === GridRowModes.Edit &&\r\n        dataGridContainerRef.current &&\r\n        !dataGridContainerRef.current.contains(event.target)\r\n      ) {\r\n        // If the click is outside the DataGrid, cancel the edit mode\r\n        setRowModesModel({\r\n          ...rowModesModel,\r\n          [selectedFIeldID]: { mode: GridRowModes.View, ignoreModifications: true },\r\n        });\r\n      }\r\n    };\r\n\r\n    // Attach the event listener\r\n    document.addEventListener('click', handleClickOutside);\r\n\r\n    // Cleanup the event listener on component unmount\r\n    return () => {\r\n      document.removeEventListener('click', handleClickOutside);\r\n    };\r\n  }, [selectedFIeldID, rowModesModel]);\r\n\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [groupName, prototypeName]);\r\n\r\n  if (!prototypeInfo) {\r\n    return <Link to={\"/\"}></Link>;\r\n  }\r\n\r\n  return (\r\n    \r\n    <div>\r\n      <SideMenu currentGroup={groupName} currentPrototype={prototypeName} />\r\n      \r\n      <div className=\"main-content\">\r\n\r\n      <div className=\"prototype-container\">\r\n\r\n        {/* <button onClick={() => navigation(\"/\")}  className=\"back-button\">Back</button>  */}\r\n        <div className='sticky-header'>\r\n        <div className='header-and-button'>\r\n\r\n          <span className=\"center-button\">\r\n                <Link to=\"/create\" className=\"create-button\">\r\n                  Create new prototype\r\n                </Link>\r\n          </span>\r\n          \r\n            <Link to=\"/\" className='link'>\r\n            <Typography variant=\"h3\" gutterBottom className='pageHeader' \r\n              sx ={{margin: '70px', marginBottom:'50px', textDecoration:'none', fontWeight: 'bold' ,letterSpacing: '2px', fontFamily:'Arial',\r\n              '&:hover': { color: 'gray', textDecoration:'none'}\r\n\r\n              }}>Digital Library</Typography>      \r\n                  \r\n            </Link>\r\n            </div>\r\n\r\n          <div className=\"header-info-container\">\r\n            <h2 className=\"prototype-header\">{prototypeInfo.id}</h2>\r\n            \r\n            <div className=\"info-section\">\r\n              {/* <h3 className=\"subsubheader\">Prototype information</h3> */}\r\n              \r\n              {!showAllInheritedPrototypes && (\r\n              <p className=\"inherited-prototypes\">\r\n                <span>Inherited Prototypes:</span> {prototypeInfo.inheritedPrototypes.join(', ')}\r\n              </p>\r\n              )}\r\n\r\n              {showAllInheritedPrototypes && (\r\n                <p className=\"inherited-prototypes\">\r\n                  <span>Inherited Prototypes:</span> {prototypeInfo.allInheritedPrototypes.join(', ')}\r\n                </p>\r\n              )}\r\n\r\n            {/* <Switch\r\n              checked={showAllInheritedPrototypes}\r\n              onChange={() => setShowAllInheritedPrototypes(!showAllInheritedPrototypes)}\r\n              label=\"Label\"\r\n            > */}\r\n\r\n            <FormControlLabel control={<Switch checked={showAllInheritedPrototypes} \r\n                onChange={() => setShowAllInheritedPrototypes(!showAllInheritedPrototypes)} />} \r\n                // label= {showAllInheritedPrototypes ? 'Hide All Inherited Prototypes' : 'Show All Inherited Prototypes'} \r\n                label={\r\n                  <Box component=\"div\" fontSize={13}>\r\n                  {showAllInheritedPrototypes ? 'Hide All Inherited Prototypes' : 'Show All Inherited Prototypes'}</Box>}\r\n                  />\r\n              {/* {showAllInheritedPrototypes ? 'Hide All Inherited Prototypes' : 'Show All Inherited Prototypes'} */}\r\n\r\n              <br></br>\r\n\r\n\r\n              {showDropdown ? (\r\n                <div className = \"dropdown-section\">\r\n                  <FormControl\r\n                    sx={{width: 400}}>\r\n                  <InputLabel id=\"inherited-label\"  sx = {{fontSize: 15}}>Inherited Prototype</InputLabel>\r\n\r\n                  <Select\r\n                    value={selectedOption}\r\n                    onChange={handleDropdownChange}\r\n                    MenuProps={MenuProps}\r\n                    labelId=\"inherited-label\"\r\n                    id=\"inherited\"\r\n                    sx={{ boxShadow: 'none', fontSize:15 }}\r\n                    input={<OutlinedInput label=\"Inherited Prototype\" \r\n                    />}\r\n\r\n                  >\r\n            \r\n                {dropdownOptions.map((option) => (\r\n                    <MenuItem\r\n                    key={option}\r\n                    value={option}\r\n                    sx = {{fontSize: 14}}\r\n                  >\r\n                    {option}\r\n                  </MenuItem>\r\n                  ))}\r\n                    \r\n                  </Select>\r\n                  </FormControl>\r\n                  <button className=\"save-button\" onClick={handleSaveInheritance}>Save</button>\r\n                  <button className=\"cancel-button\" onClick={handleCancel}>Cancel</button>\r\n\r\n                </div>\r\n              ) : (\r\n                <button className=\"add-inheritance-button\" onClick={handleAddInheritanceClick}>\r\n                  Add Inherited Prototype\r\n                </button>\r\n              )}\r\n\r\n          {!isFormVisible && (\r\n            <button className=\"add-field-button\" onClick={handleToggleForm}>\r\n              Add Field\r\n            </button>\r\n          )}\r\n\r\n\r\n          {isFormVisible && (\r\n            <div className=\"add-field-form\">\r\n              <h3 className = \"add-new-field\">Add New Field</h3>\r\n\r\n          \r\n              <Stack spacing={2} sx = {{'margin':'10px'}}>\r\n\r\n                  <TextField\r\n                    required\r\n                    id=\"outlined-required\"\r\n                    label=\"Field ID\"\r\n                    size=\"small\"\r\n                  />\r\n\r\n\r\n                  <TextField\r\n                    required\r\n                    id=\"outlined-required\"\r\n                    label=\"Field Group ID\"\r\n                    size=\"small\"\r\n\r\n                  />\r\n\r\n                  <TextField\r\n                    required\r\n                    id=\"outlined-required\"\r\n                    label=\"Value Type\"\r\n                    size=\"small\"\r\n\r\n                  />\r\n\r\n                  <TextField\r\n                    required\r\n                    id=\"outlined-required\"\r\n                    label=\"Constraint\"\r\n                    size=\"small\"\r\n\r\n                  />\r\n                    \r\n                    <TextField\r\n                    required\r\n                    id=\"outlined-required\"\r\n                    label=\"Default Value\"\r\n                    size=\"small\"\r\n                  />\r\n\r\n\r\n\r\n\r\n              <FormControlLabel control={<Checkbox sx={{ '& .MuiSvgIcon-root': { fontSize: 15 } }}/>} label=\"Trans\" />\r\n              <FormControlLabel control={<Checkbox sx={{ '& .MuiSvgIcon-root': { fontSize: 15 } }}/>} label=\"Array\" />\r\n\r\n            </Stack>\r\n  \r\n            <button className=\"save-field-button\" onClick={handleAddField}>\r\n                Save\r\n              </button>\r\n              <button className=\"cancel-field-button\" onClick={handleToggleForm}>\r\n                Cancel\r\n              </button>\r\n            </div>\r\n          )}\r\n\r\n\r\n\r\n            </div>\r\n          </div>\r\n      </div>\r\n\r\n      \r\n        \r\n        <div className='field-section'>\r\n        <div ref={dataGridContainerRef}>\r\n\r\n        <div className=\"subsubheader\">Fields</div>\r\n        {/* <ul className=\"fields-list\">\r\n          {prototypeInfo.fields.map((field, index) => (\r\n            <li key={index} className=\"field-item\">\r\n              <p><span>Field ID:</span> {field.id}</p>\r\n              <p><span>Field Type:</span> {field.attributeType}</p>\r\n              {field.constraints && (\r\n                <p><span>Constraints:</span> {field.constraints}</p>\r\n              )}\r\n              {field.alias && (\r\n                <p><span>Alias:</span> {field.alias}</p>\r\n              )}\r\n            </li>\r\n          ))}\r\n        </ul> */}\r\n\r\n        <Box\r\n              sx={{\r\n                width: '100%',\r\n                marginTop: '20px',\r\n                height: 350,\r\n                '& .textPrimary': {\r\n                  color: 'text.primary',\r\n                },\r\n                '& .super-app-theme--header': {\r\n                },\r\n                \r\n              }}\r\n            >\r\n              <DataGrid\r\n                rows={rows}\r\n                columns={columns}\r\n                className = \"fields-data\"   \r\n                editMode=\"row\"\r\n                rowModesModel={rowModesModel}\r\n                onRowModesModelChange={handleRowModesModelChange}\r\n                onRowEditStop={handleRowEditStop}\r\n                processRowUpdate={processRowUpdate}\r\n                hideFooterPagination={true}\r\n                hideFooter={true}\r\n                slotProps={{\r\n                  toolbar: { setRows, setRowModesModel },\r\n                }}   \r\n                sx={{ '& .MuiDataGrid-row': { marginTop: 1, marginBottom: 1 }, \r\n                '& .coloured': { textAlign: 'center', color: '#7181AD' },'& .MuiDataGrid-virtualScroller::-webkit-horizontal-scrollbar': {display: 'none' } }}\r\n    \r\n              />\r\n\r\n            </Box>\r\n            </div>\r\n            <Dialog\r\n              open={open}\r\n              onClose={handleCloseConfirm}\r\n              aria-labelledby=\"alert-dialog-title\"\r\n              aria-describedby=\"alert-dialog-description\"\r\n            >\r\n              <DialogTitle id=\"alert-dialog-title\">\r\n                {\"Delete Confirmation\"}\r\n              </DialogTitle>\r\n              <DialogContent>\r\n                <DialogContentText id=\"alert-dialog-description\">\r\n                  You are going to delete this prototype. Are you sure?\r\n                </DialogContentText>\r\n              </DialogContent>\r\n              <DialogActions>\r\n                <Button onClick={handleCloseConfirm}>CANCEL</Button>\r\n                <Button onClick={handleDeleteConfirm} autoFocus>\r\n                DELETE\r\n                </Button>\r\n              </DialogActions>\r\n            </Dialog>\r\n\r\n\r\n  \r\n      </div>\r\n      </div>\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Prototype;","C:\\Users\\mourt\\react-electron\\src\\ValueContext.js",[],"C:\\Users\\mourt\\react-electron\\src\\AddNamePage.js",["125","126","127","128","129","130","131","132"],"C:\\Users\\mourt\\react-electron\\src\\CustomAlert.js",[],"C:\\Users\\mourt\\react-electron\\src\\reportWebVitals.js",[],"C:\\Users\\mourt\\react-electron\\src\\SideMenu.js",["133","134","135","136"],"import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './css/SideMenu.css'; // Make sure to link your CSS file correctly\r\nimport NavigateNextIcon from '@mui/icons-material/NavigateNext';\r\nimport Box from '@mui/material/Stack';\r\nimport { useNavigate } from 'react-router'\r\n\r\nfunction SideMenu(props) {\r\n  const groups = [\r\n    { name: 'Local Prototypes', url: 'http://localhost:8080/getLocal' },\r\n    { name: 'Core Prototypes', url: 'http://localhost:8080/getCore' },\r\n    { name: 'Delta Prototypes', url: 'http://localhost:8080/getDelta' },\r\n  ];\r\n\r\n  const { currentGroup, currentPrototype } = props;\r\n  const [expandedGroup, setExpandedGroup] = useState(null);\r\n  const [groupData, setGroupData] = useState({});\r\n  const [openForm, setOpenForm] = useState(false); // Track open form state\r\n  const [selectedItems, setSelectedItems] = useState({}); // Track selected items by category\r\n  \r\n  const navigate = useNavigate()\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchData = async (url, index) => {\r\n      try {\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n        const formattedData = data.map(name => ({\r\n          formattedName: name.replace(/([A-Z])/g, ' $1'),\r\n          unformattedName: name,\r\n        }));\r\n        setGroupData(prevData => ({ ...prevData, [index]: formattedData }));\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    };\r\n\r\n    groups.forEach((group, index) => {\r\n      if (expandedGroup === index) {\r\n        fetchData(group.url, index);\r\n      }\r\n    });\r\n  }, [expandedGroup]);\r\n\r\n  const handleGroupClick = (index) => {\r\n    if (expandedGroup === index) {\r\n      setExpandedGroup(null);\r\n      setOpenForm(false); // Reset open form state\r\n    } else {\r\n      setExpandedGroup(index);\r\n      setOpenForm(false); // Reset open form state\r\n    }\r\n  };\r\n  \r\n\r\n\r\n  const handleItemClick = (fullPath, groupIndex) => {\r\n    setOpenForm(false); // Reset open form state\r\n    setSelectedItems((prevItems) => ({\r\n      ...prevItems,\r\n      [groupIndex]: null, // Clear selected item for this group\r\n    }));\r\n    navigate(fullPath);\r\n  };\r\n  \r\n  \r\n  return (\r\n    <div className=\"side-menu\">\r\n      {groups.map((group, groupIndex) => (\r\n        <div key={groupIndex} className=\"category\">\r\n          <div\r\n            className={`category-name ${\r\n              expandedGroup === groupIndex ? \"expanded\" : \"\"\r\n            }`}\r\n            onClick={() => handleGroupClick(groupIndex)}\r\n          >\r\n            {group.name === currentGroup ? (\r\n              <strong>{group.name}</strong>\r\n            ) : (\r\n              group.name\r\n            )}\r\n          </div>\r\n          {expandedGroup === groupIndex && (\r\n            <div className=\"category-content\">\r\n              {groupData[groupIndex] && (\r\n                <div className=\"content-scroll\">\r\n                  <div>\r\n                  {/* <Box sx={{ alignItems: 'flex-start', marginTop: '20px', marginBottom:'20px', marginLeft:'10px' }}>\r\n                    <span className=\"all-local\">\r\n                    <Link to={`/${group.name.toLowerCase().replace(/\\s+/g, '').replace(\"prototypes\",\"\")}` } className='all-local'>\r\n                        All {group.name.toLowerCase().replace(/\\s+/g, '').replace(\"prototypes\",\"\")} prototypes\r\n                      </Link>\r\n                      <NavigateNextIcon />\r\n                    </span>\r\n                  </Box> */}\r\n                  {groupData[groupIndex].map((prototype, itemIndex) => {\r\n                    const formattedGroupName = group.name\r\n                      .toLowerCase()\r\n                      .replace(/\\s+/g, '')\r\n                      .replace('prototypes', '');\r\n                    const fullPath = `/prototype/${formattedGroupName}/${prototype.unformattedName}`;\r\n                    return (\r\n                      <Link\r\n                        to={fullPath}\r\n                        key={`${groupIndex}-${itemIndex}`}\r\n                        className={`menu-link ${\r\n                          selectedItems[groupIndex] === itemIndex ? 'selected' : ''\r\n                        }`} // Add class for selected item\r\n                        onClick={() => handleItemClick(fullPath)} // Pass groupIndex\r\n                      >\r\n                         <div>\r\n                        {prototype.unformattedName === currentPrototype ? (\r\n                          <strong>{prototype.unformattedName}</strong>\r\n                        ) : (\r\n                          prototype.unformattedName\r\n                        )}\r\n                      </div>\r\n                      </Link>\r\n                    );\r\n                  })}\r\n\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SideMenu;","C:\\Users\\mourt\\react-electron\\src\\LocalPrototypes.js",["137"],"import React, { useEffect, useState } from 'react';\r\nimport './css/LocalPrototypes.css'; // Import the CSS file\r\nimport { Link } from 'react-router-dom'; // Import the Link component\r\nimport SideMenu from './SideMenu';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\n\r\nfunction LocalPrototypes() {\r\n  const [localData, setLocalData] = useState([]);\r\n  const navigation = useNavigate();\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const fetchData = () => {\r\n    fetch('http://localhost:8080/getLocal')\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setLocalData(data);\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching local data:', error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"local-page\">\r\n      \r\n      <SideMenu/>\r\n      <div className='main-container'>\r\n      <button onClick={() => navigation(\"/\")} className=\"back-button\">Back</button> \r\n\r\n        <h1 className='header'>Local Prototypes</h1>\r\n\r\n        {localData.map((item) => (\r\n          <Link to={`/prototype/local/${item}`} key={item} className=\"local-card\">\r\n            \r\n              {item}\r\n        \r\n          </Link>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LocalPrototypes;\r\n","C:\\Users\\mourt\\react-electron\\src\\CorePrototypes.js",["138"],"import React, { useEffect, useState } from 'react';\r\nimport './css/LocalPrototypes.css'; // Import the CSS file\r\nimport { Link } from 'react-router-dom'; // Import the Link component\r\nimport SideMenu from './SideMenu';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\n\r\n\r\nfunction CorePrototypes() {\r\n  const [coreData, setcoreData] = useState([]);\r\n  const navigation = useNavigate();\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const fetchData = () => {\r\n    fetch('http://localhost:8080/getCore')\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setcoreData(data);\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching core data:', error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"local-page\">\r\n      \r\n      <SideMenu/>\r\n      <div className='main-container'>\r\n        <button onClick={() => navigation(\"/\")} className=\"back-button\">Back</button> \r\n\r\n        <h1 className='header'>Core Prototypes</h1>\r\n          {coreData.map((item) => (\r\n            <Link to={`/prototype/core/${item}`} key={item} className=\"local-card\">\r\n              \r\n                {item}\r\n          \r\n            </Link>\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CorePrototypes;\r\n","C:\\Users\\mourt\\react-electron\\src\\HomePage.js",["139","140","141","142","143","144","145","146","147","148","149","150","151","152","153"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { Link } from 'react-router-dom';\r\nimport './css/Prototype.css'; // Import your CSS file\r\nimport SideMenu from './SideMenu';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nimport {\r\n  GridRowModes,\r\n  DataGrid,\r\n  GridToolbarContainer,\r\n  GridActionsCellItem,\r\n  GridRowEditStopReasons,\r\n} from '@mui/x-data-grid';\r\nimport {\r\n  randomCreatedDate,\r\n  randomTraderName,\r\n  randomId,\r\n  randomArrayItem,\r\n} from '@mui/x-data-grid-generator';\r\n\r\nimport NavigateNextIcon from '@mui/icons-material/NavigateNext';\r\n\r\n\r\nfunction Prototype(props) {\r\n  \r\n  return (\r\n    \r\n    <div>\r\n      <SideMenu />\r\n      \r\n      <div className=\"main-content\">\r\n\r\n      <div className=\"prototype-container\">\r\n\r\n        {/* <button onClick={() => navigation(\"/\")}  className=\"back-button\">Back</button>  */}\r\n        <div className='sticky-header'>\r\n\r\n          <div className='header-and-button'>\r\n\r\n          <span className=\"center-button\">\r\n                <Link to=\"/create\" className=\"create-button\">\r\n                  Create new prototype\r\n                </Link>\r\n          </span>\r\n          \r\n            <Link to=\"/\" className='link'>\r\n            <Typography variant=\"h3\" gutterBottom className='pageHeader' \r\n              sx ={{margin: '70px', marginBottom:'50px', textDecoration:'none', fontWeight: 'bold' ,letterSpacing: '2px', fontFamily:'Arial',\r\n              '&:hover': { color: 'gray', textDecoration:'none'}\r\n\r\n              }}>Digital Library</Typography>      \r\n                  \r\n            </Link>\r\n\r\n            </div>\r\n\r\n        <div className=\"alt-text-container\">\r\n          <h2 className=\"alt-text\">Please select a prototype from the side menu to explore their properties,\r\n          or create a new one pressing the \"Create new prototype\" button.</h2> \r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Prototype;",{"ruleId":"154","replacedBy":"155"},{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","severity":1,"message":"159","line":3,"column":10,"nodeType":"160","messageId":"161","endLine":3,"endColumn":14},{"ruleId":"158","severity":1,"message":"162","line":10,"column":8,"nodeType":"160","messageId":"161","endLine":10,"endColumn":16},{"ruleId":"158","severity":1,"message":"163","line":17,"column":8,"nodeType":"160","messageId":"161","endLine":17,"endColumn":18},{"ruleId":"158","severity":1,"message":"164","line":62,"column":9,"nodeType":"160","messageId":"161","endLine":62,"endColumn":15},{"ruleId":"158","severity":1,"message":"165","line":63,"column":9,"nodeType":"160","messageId":"161","endLine":63,"endColumn":15},{"ruleId":"158","severity":1,"message":"166","line":65,"column":24,"nodeType":"160","messageId":"161","endLine":65,"endColumn":39},{"ruleId":"158","severity":1,"message":"167","line":68,"column":9,"nodeType":"160","messageId":"161","endLine":68,"endColumn":22},{"ruleId":"154","replacedBy":"168"},{"ruleId":"156","replacedBy":"169"},{"ruleId":"170","severity":1,"message":"171","line":37,"column":6,"nodeType":"172","endLine":37,"endColumn":21,"suggestions":"173"},{"ruleId":"154","replacedBy":"174"},{"ruleId":"156","replacedBy":"175"},{"ruleId":"158","severity":1,"message":"176","line":7,"column":8,"nodeType":"160","messageId":"161","endLine":7,"endColumn":17},{"ruleId":"158","severity":1,"message":"177","line":11,"column":8,"nodeType":"160","messageId":"161","endLine":11,"endColumn":12},{"ruleId":"158","severity":1,"message":"178","line":13,"column":8,"nodeType":"160","messageId":"161","endLine":13,"endColumn":12},{"ruleId":"158","severity":1,"message":"179","line":14,"column":8,"nodeType":"160","messageId":"161","endLine":14,"endColumn":19},{"ruleId":"158","severity":1,"message":"180","line":15,"column":8,"nodeType":"160","messageId":"161","endLine":15,"endColumn":30},{"ruleId":"158","severity":1,"message":"181","line":16,"column":8,"nodeType":"160","messageId":"161","endLine":16,"endColumn":17},{"ruleId":"158","severity":1,"message":"182","line":17,"column":8,"nodeType":"160","messageId":"161","endLine":17,"endColumn":17},{"ruleId":"158","severity":1,"message":"183","line":18,"column":8,"nodeType":"160","messageId":"161","endLine":18,"endColumn":15},{"ruleId":"158","severity":1,"message":"184","line":24,"column":8,"nodeType":"160","messageId":"161","endLine":24,"endColumn":20},{"ruleId":"158","severity":1,"message":"185","line":25,"column":8,"nodeType":"160","messageId":"161","endLine":25,"endColumn":25},{"ruleId":"158","severity":1,"message":"186","line":33,"column":10,"nodeType":"160","messageId":"161","endLine":33,"endColumn":20},{"ruleId":"158","severity":1,"message":"187","line":34,"column":10,"nodeType":"160","messageId":"161","endLine":34,"endColumn":17},{"ruleId":"158","severity":1,"message":"188","line":45,"column":3,"nodeType":"160","messageId":"161","endLine":45,"endColumn":23},{"ruleId":"158","severity":1,"message":"189","line":50,"column":3,"nodeType":"160","messageId":"161","endLine":50,"endColumn":20},{"ruleId":"158","severity":1,"message":"190","line":51,"column":3,"nodeType":"160","messageId":"161","endLine":51,"endColumn":19},{"ruleId":"158","severity":1,"message":"191","line":52,"column":3,"nodeType":"160","messageId":"161","endLine":52,"endColumn":11},{"ruleId":"158","severity":1,"message":"192","line":53,"column":3,"nodeType":"160","messageId":"161","endLine":53,"endColumn":18},{"ruleId":"158","severity":1,"message":"193","line":56,"column":8,"nodeType":"160","messageId":"161","endLine":56,"endColumn":24},{"ruleId":"158","severity":1,"message":"194","line":60,"column":7,"nodeType":"160","messageId":"161","endLine":60,"endColumn":10},{"ruleId":"158","severity":1,"message":"195","line":73,"column":9,"nodeType":"160","messageId":"161","endLine":73,"endColumn":24},{"ruleId":"158","severity":1,"message":"196","line":83,"column":9,"nodeType":"160","messageId":"161","endLine":83,"endColumn":19},{"ruleId":"158","severity":1,"message":"197","line":86,"column":27,"nodeType":"160","messageId":"161","endLine":86,"endColumn":45},{"ruleId":"158","severity":1,"message":"198","line":88,"column":24,"nodeType":"160","messageId":"161","endLine":88,"endColumn":39},{"ruleId":"158","severity":1,"message":"199","line":97,"column":10,"nodeType":"160","messageId":"161","endLine":97,"endColumn":24},{"ruleId":"158","severity":1,"message":"200","line":98,"column":10,"nodeType":"160","messageId":"161","endLine":98,"endColumn":24},{"ruleId":"201","severity":1,"message":"202","line":107,"column":30,"nodeType":"203","messageId":"204","endLine":107,"endColumn":31},{"ruleId":"158","severity":1,"message":"205","line":138,"column":9,"nodeType":"160","messageId":"161","endLine":138,"endColumn":14},{"ruleId":"206","severity":1,"message":"207","line":146,"column":21,"nodeType":"203","messageId":"208","endLine":146,"endColumn":23},{"ruleId":"201","severity":1,"message":"202","line":147,"column":32,"nodeType":"203","messageId":"204","endLine":147,"endColumn":33},{"ruleId":"170","severity":1,"message":"209","line":294,"column":6,"nodeType":"172","endLine":294,"endColumn":32,"suggestions":"210"},{"ruleId":"170","severity":1,"message":"209","line":359,"column":6,"nodeType":"172","endLine":359,"endColumn":32,"suggestions":"211"},{"ruleId":"158","severity":1,"message":"212","line":3,"column":8,"nodeType":"160","messageId":"161","endLine":3,"endColumn":19},{"ruleId":"158","severity":1,"message":"213","line":5,"column":8,"nodeType":"160","messageId":"161","endLine":5,"endColumn":13},{"ruleId":"158","severity":1,"message":"214","line":18,"column":10,"nodeType":"160","messageId":"161","endLine":18,"endColumn":15},{"ruleId":"158","severity":1,"message":"215","line":18,"column":17,"nodeType":"160","messageId":"161","endLine":18,"endColumn":25},{"ruleId":"158","severity":1,"message":"216","line":19,"column":10,"nodeType":"160","messageId":"161","endLine":19,"endColumn":22},{"ruleId":"158","severity":1,"message":"217","line":19,"column":24,"nodeType":"160","messageId":"161","endLine":19,"endColumn":39},{"ruleId":"158","severity":1,"message":"218","line":33,"column":9,"nodeType":"160","messageId":"161","endLine":33,"endColumn":20},{"ruleId":"158","severity":1,"message":"219","line":37,"column":9,"nodeType":"160","messageId":"161","endLine":37,"endColumn":20},{"ruleId":"158","severity":1,"message":"193","line":4,"column":8,"nodeType":"160","messageId":"161","endLine":4,"endColumn":24},{"ruleId":"158","severity":1,"message":"220","line":5,"column":8,"nodeType":"160","messageId":"161","endLine":5,"endColumn":11},{"ruleId":"158","severity":1,"message":"221","line":18,"column":10,"nodeType":"160","messageId":"161","endLine":18,"endColumn":18},{"ruleId":"170","severity":1,"message":"171","line":44,"column":6,"nodeType":"172","endLine":44,"endColumn":21,"suggestions":"222"},{"ruleId":"158","severity":1,"message":"223","line":5,"column":10,"nodeType":"160","messageId":"161","endLine":5,"endColumn":19},{"ruleId":"158","severity":1,"message":"223","line":5,"column":10,"nodeType":"160","messageId":"161","endLine":5,"endColumn":19},{"ruleId":"158","severity":1,"message":"224","line":1,"column":17,"nodeType":"160","messageId":"161","endLine":1,"endColumn":25},{"ruleId":"158","severity":1,"message":"225","line":1,"column":27,"nodeType":"160","messageId":"161","endLine":1,"endColumn":36},{"ruleId":"158","severity":1,"message":"226","line":1,"column":38,"nodeType":"160","messageId":"161","endLine":1,"endColumn":44},{"ruleId":"158","severity":1,"message":"223","line":2,"column":10,"nodeType":"160","messageId":"161","endLine":2,"endColumn":19},{"ruleId":"158","severity":1,"message":"227","line":2,"column":21,"nodeType":"160","messageId":"161","endLine":2,"endColumn":32},{"ruleId":"158","severity":1,"message":"228","line":9,"column":3,"nodeType":"160","messageId":"161","endLine":9,"endColumn":15},{"ruleId":"158","severity":1,"message":"229","line":10,"column":3,"nodeType":"160","messageId":"161","endLine":10,"endColumn":11},{"ruleId":"158","severity":1,"message":"188","line":11,"column":3,"nodeType":"160","messageId":"161","endLine":11,"endColumn":23},{"ruleId":"158","severity":1,"message":"230","line":12,"column":3,"nodeType":"160","messageId":"161","endLine":12,"endColumn":22},{"ruleId":"158","severity":1,"message":"231","line":13,"column":3,"nodeType":"160","messageId":"161","endLine":13,"endColumn":25},{"ruleId":"158","severity":1,"message":"189","line":16,"column":3,"nodeType":"160","messageId":"161","endLine":16,"endColumn":20},{"ruleId":"158","severity":1,"message":"190","line":17,"column":3,"nodeType":"160","messageId":"161","endLine":17,"endColumn":19},{"ruleId":"158","severity":1,"message":"191","line":18,"column":3,"nodeType":"160","messageId":"161","endLine":18,"endColumn":11},{"ruleId":"158","severity":1,"message":"192","line":19,"column":3,"nodeType":"160","messageId":"161","endLine":19,"endColumn":18},{"ruleId":"158","severity":1,"message":"193","line":22,"column":8,"nodeType":"160","messageId":"161","endLine":22,"endColumn":24},"no-native-reassign",["232"],"no-negated-in-lhs",["233"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'SideMenu' is defined but never used.","'Typography' is defined but never used.","'onBack' is assigned a value but never used.","'onOpen' is assigned a value but never used.","'setSearchString' is assigned a value but never used.","'filteredFiles' is assigned a value but never used.",["232"],["233"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'groups'. Either include it or remove the dependency array.","ArrayExpression",["234"],["232"],["233"],"'FormGroup' is defined but never used.","'Grid' is defined but never used.","'Card' is defined but never used.","'CardContent' is defined but never used.","'CheckCircleTwoToneIcon' is defined but never used.","'CloseIcon' is defined but never used.","'CheckIcon' is defined but never used.","'AddIcon' is defined but never used.","'ToggleButton' is defined but never used.","'ToggleButtonGroup' is defined but never used.","'makeStyles' is defined but never used.","'SxProps' is defined but never used.","'GridToolbarContainer' is defined but never used.","'randomCreatedDate' is defined but never used.","'randomTraderName' is defined but never used.","'randomId' is defined but never used.","'randomArrayItem' is defined but never used.","'NavigateNextIcon' is defined but never used.","'fID' is assigned a value but never used.","'handleClickOpen' is assigned a value but never used.","'navigation' is assigned a value but never used.","'setSelectedFIeldID' is assigned a value but never used.","'setNewFieldInfo' is assigned a value but never used.","'addInheritance' is assigned a value but never used.","'newInheritance' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'theme' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","unexpected","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["235"],["236"],"'CustomAlert' is defined but never used.","'Stack' is defined but never used.","'alert' is assigned a value but never used.","'setAlert' is assigned a value but never used.","'alertContent' is assigned a value but never used.","'setAlertContent' is assigned a value but never used.","'handleClick' is assigned a value but never used.","'handleClose' is assigned a value but never used.","'Box' is defined but never used.","'openForm' is assigned a value but never used.",["237"],"'useParams' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'useRef' is defined but never used.","'useNavigate' is defined but never used.","'GridRowModes' is defined but never used.","'DataGrid' is defined but never used.","'GridActionsCellItem' is defined but never used.","'GridRowEditStopReasons' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"238","fix":"239"},{"desc":"240","fix":"241"},{"desc":"242","fix":"243"},{"desc":"238","fix":"244"},"Update the dependencies array to be: [expandedGroup, groups]",{"range":"245","text":"246"},"Update the dependencies array to be: [prototypeName, groupName, fetchData]",{"range":"247","text":"248"},"Update the dependencies array to be: [fetchData, groupName, prototypeName]",{"range":"249","text":"250"},{"range":"251","text":"246"},[1253,1268],"[expandedGroup, groups]",[9292,9318],"[prototypeName, groupName, fetchData]",[11138,11164],"[fetchData, groupName, prototypeName]",[1621,1636]]