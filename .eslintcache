[{"C:\\Users\\mourt\\react-electron\\src\\index.js":"1","C:\\Users\\mourt\\react-electron\\src\\App.js":"2","C:\\Users\\mourt\\react-electron\\src\\FilesViewer.js":"3","C:\\Users\\mourt\\react-electron\\src\\Icons.js":"4","C:\\Users\\mourt\\react-electron\\src\\Home.js":"5","C:\\Users\\mourt\\react-electron\\src\\AddFieldsPage.js":"6","C:\\Users\\mourt\\react-electron\\src\\AddInheritancePage.js":"7","C:\\Users\\mourt\\react-electron\\src\\AddSchemePage.js":"8","C:\\Users\\mourt\\react-electron\\src\\Prototype.js":"9","C:\\Users\\mourt\\react-electron\\src\\ValueContext.js":"10","C:\\Users\\mourt\\react-electron\\src\\AddNamePage.js":"11","C:\\Users\\mourt\\react-electron\\src\\CustomAlert.js":"12","C:\\Users\\mourt\\react-electron\\src\\reportWebVitals.js":"13","C:\\Users\\mourt\\react-electron\\src\\SideMenu.js":"14"},{"size":424,"mtime":1693828845789,"results":"15","hashOfConfig":"16"},{"size":5600,"mtime":1694005949963,"results":"17","hashOfConfig":"16"},{"size":807,"mtime":1693823961749,"results":"18","hashOfConfig":"16"},{"size":1325,"mtime":1693824092947,"results":"19","hashOfConfig":"16"},{"size":2856,"mtime":1693834263999,"results":"20","hashOfConfig":"16"},{"size":3994,"mtime":1693133636705,"results":"21","hashOfConfig":"16"},{"size":3026,"mtime":1693133632539,"results":"22","hashOfConfig":"16"},{"size":2062,"mtime":1693133626821,"results":"23","hashOfConfig":"16"},{"size":9122,"mtime":1694005085404,"results":"24","hashOfConfig":"16"},{"size":417,"mtime":1693045414065,"results":"25","hashOfConfig":"16"},{"size":2127,"mtime":1693206314222,"results":"26","hashOfConfig":"16"},{"size":191,"mtime":1693206392837,"results":"27","hashOfConfig":"16"},{"size":362,"mtime":1693821786864,"results":"28","hashOfConfig":"16"},{"size":3450,"mtime":1693841366990,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"j2gtvp",{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"32"},"C:\\Users\\mourt\\react-electron\\src\\index.js",[],["63","64"],"C:\\Users\\mourt\\react-electron\\src\\App.js",["65","66","67","68"],"C:\\Users\\mourt\\react-electron\\src\\FilesViewer.js",[],["69","70"],"C:\\Users\\mourt\\react-electron\\src\\Icons.js",[],"C:\\Users\\mourt\\react-electron\\src\\Home.js",["71"],"import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './css/App.css';\r\n\r\nfunction Home() {\r\n  const groups = [\r\n    { name: 'Local Prototypes', url: 'http://localhost:8080/getLocal' },\r\n    { name: 'Core Prototypes', url: 'http://localhost:8080/getCore' },\r\n    { name: 'Delta Prototypes', url: 'http://localhost:8080/getDelta' },\r\n  ];\r\n\r\n  const [expandedGroup, setExpandedGroup] = useState(null);\r\n  const [groupData, setGroupData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async (url, index) => {\r\n      try {\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n        const formattedData = data.map(name => ({\r\n          formattedName: name.replace(/([A-Z])/g, ' $1'),\r\n          unformattedName: name,\r\n        }));\r\n        setGroupData(prevData => ({ ...prevData, [index]: formattedData }));\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    };\r\n\r\n    groups.forEach((group, index) => {\r\n      if (expandedGroup === index) {\r\n        fetchData(group.url, index);\r\n      }\r\n    });\r\n  }, [expandedGroup]);\r\n\r\n  const handleGroupClick = (index) => {\r\n    if (expandedGroup === index) {\r\n      setExpandedGroup(null);\r\n    } else {\r\n      setExpandedGroup(index);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"center-button\">\r\n        <Link to=\"/create\" className=\"create-button\">\r\n          Create new prototype\r\n        </Link>\r\n      </div>\r\n      {groups.map((group, index) => (\r\n        <div key={index} className=\"group\">\r\n          <div\r\n            className={`group-name ${expandedGroup === index ? 'expanded' : ''}`}\r\n            onClick={() => handleGroupClick(index)}\r\n          >\r\n            {group.name}\r\n          </div>\r\n          {expandedGroup === index && (\r\n            <div className=\"group-content\">\r\n              {groupData[index] && (\r\n                <div>\r\n                  {groupData[index].map((prototype, valueIndex) => {\r\n                    const formattedGroupName = group.name\r\n                      .toLowerCase()\r\n                      .replace(/\\s+/g, '')\r\n                      .replace('prototypes', '');\r\n                    const fullPath = `/prototype/${formattedGroupName}/${prototype.unformattedName}`;\r\n                    return (\r\n                      <Link\r\n                        to={fullPath}\r\n                        key={`${index}-${valueIndex}`}\r\n                        className=\"card\"\r\n                      >\r\n                        <div className=\"card-content\">{prototype.formattedName}</div>\r\n                      </Link>\r\n                    );\r\n                  })}\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","C:\\Users\\mourt\\react-electron\\src\\AddFieldsPage.js",[],"C:\\Users\\mourt\\react-electron\\src\\AddInheritancePage.js",[],"C:\\Users\\mourt\\react-electron\\src\\AddSchemePage.js",[],"C:\\Users\\mourt\\react-electron\\src\\Prototype.js",["72","73","74","75","76","77","78","79","80"],"import React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { Link } from 'react-router-dom';\r\nimport './css/Prototype.css'; // Import your CSS file\r\nimport SideMenu from './SideMenu';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\n\r\nfunction Prototype() {\r\n\r\n  const navigation = useNavigate();\r\n  const { groupName, prototypeName } = useParams();\r\n  const [prototypeInfo, setPrototypeInfo] = useState();\r\n  const [isFormVisible, setIsFormVisible] = useState(false);\r\n  const [newFieldInfo, setNewFieldInfo] = useState({\r\n    id: '',\r\n    fgId: '',\r\n    valueType: '',\r\n    trans: false,\r\n    array: false,\r\n    map: false,\r\n    constraint: '',\r\n    defaultValue: '',\r\n  });\r\n  const [addInheritance, setAddInheritance] = useState(false);\r\n  const [newInheritance, setNewInheritance] = useState('');\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      var fullPath = \"\";\r\n      if (groupName == \"core\") {\r\n        fullPath = \"butterfly\" + \"/\" + groupName + \"/\" + prototypeName;\r\n      } else {\r\n        fullPath = groupName + \"/\" + prototypeName;\r\n      }\r\n      console.log(fullPath);\r\n      const response = await fetch(`http://localhost:8080/show?prototypePath=/${fullPath}&showSummary=true&showInheritance=true&showFields=true`);\r\n      const data = await response.json();\r\n      setPrototypeInfo(data);\r\n    } catch (error) {\r\n      console.error('Error fetching prototype data:', error);\r\n    }\r\n  };\r\n\r\n  const handleToggleForm = () => {\r\n    setIsFormVisible(!isFormVisible);\r\n  };\r\n\r\n  \r\n\r\n  const handleAddField = async () => {\r\n    try {\r\n\r\n      var fullPath = \"\";\r\n      if (groupName == \"core\") {\r\n        fullPath = \"butterfly\" + \"/\" + groupName + \"/\" + prototypeName;\r\n      } else {\r\n        fullPath = groupName + \"/\" + prototypeName;\r\n      }\r\n      const fieldUrl = `http://localhost:8080/addField?prototypePath=/${fullPath}&id=${newFieldInfo.id}&fgId=${newFieldInfo.fgId}&valueType=${newFieldInfo.valueType}&trans=${newFieldInfo.trans}&array=${newFieldInfo.array}&map=${newFieldInfo.map}&constraint=${newFieldInfo.constraint}&defaultValue=${newFieldInfo.defaultValue}`;\r\n\r\n      const response = await fetch(fieldUrl);\r\n\r\n      if (!response.ok) {\r\n        console.error('Error adding field');\r\n        return;\r\n      }\r\n\r\n      \r\n      fetchData();\r\n    } catch (error) {\r\n      console.error('API call error:', error);\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n  const handleAddInheritanceClick = () => {\r\n    setAddInheritance(true);\r\n  };\r\n\r\n  const handleSaveInheritance = async () => {\r\n    try {\r\n      var fullPath = \"\";\r\n      if (groupName == \"core\") {\r\n        fullPath = \"butterfly\" + \"/\" + groupName + \"/\" + prototypeName;\r\n      } else {\r\n        fullPath = groupName + \"/\" + prototypeName;\r\n      }      \r\n      \r\n      const response = await fetch(`http://localhost:8080/updateInheritance?prototypePath=/${fullPath}&inheritedPrototypes=${newInheritance}`);\r\n\r\n      if (!response.ok) {\r\n        console.error('Error updating inheritance');\r\n        return;\r\n      }\r\n  \r\n      let responseData;\r\n\r\n      const cloneResponse = response.clone(); // Clone the response object\r\n\r\n      try {\r\n        responseData = await cloneResponse.json(); // Attempt to parse JSON data\r\n      } catch (error) {\r\n        responseData = await response.text(); // Get the plain text response\r\n      }\r\n\r\n      if (responseData == \"Updated\") {\r\n        alert(\"Prototype updated successfully!\")\r\n      } else {\r\n        alert(\"This prototype does not exist or they are already inherited.\")\r\n      }\r\n\r\n     \r\n\r\n      setAddInheritance(false);\r\n      setNewInheritance('');\r\n      fetchData();\r\n      \r\n    } catch (error) {\r\n      console.error('API call error:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [groupName, prototypeName]);\r\n\r\n  if (!prototypeInfo) {\r\n    return <Link to={\"/\"}></Link>;\r\n  }\r\n\r\n  return (\r\n    \r\n    <div>\r\n      <SideMenu />\r\n      <div className=\"main-content\">\r\n\r\n      <div className=\"prototype-container\">\r\n\r\n        <button onClick={() => navigation(\"/\")}  className=\"back-button\">Back</button> \r\n        <h2 className=\"header\">{prototypeInfo.id.replace(/([A-Z])/g, ' $1')}</h2>\r\n\r\n        <div className=\"info-section\">\r\n          <h3 className=\"subsubheader\">Prototype information</h3>\r\n          <p className=\"info-prototypes\">\r\n            <p><span>ID:</span> {prototypeInfo.id}</p>\r\n            <p><span>Abstract:</span> {prototypeInfo.isAbstract.toString()}</p>\r\n            <p><span>Number of Fields:</span> {prototypeInfo.numOfFields}</p>\r\n          </p>\r\n        </div>\r\n\r\n        <div className=\"inheritance-section\">\r\n          <h3 className=\"subsubheader\">Inheritance</h3>\r\n\r\n        \r\n\r\n          {prototypeInfo.inheritedPrototypes.length > 0 && (\r\n            <p className=\"inherited-prototypes\">\r\n              <span>Inherited Prototypes:</span> {prototypeInfo.inheritedPrototypes.join(', ')}\r\n            </p>\r\n          )}\r\n\r\n          {prototypeInfo.allInheritedPrototypes.length > 0 && (\r\n            <p className=\"all-inherited-prototypes\">\r\n              <span>All Inherited Prototypes:</span> {prototypeInfo.allInheritedPrototypes.join(', ')}\r\n            </p>\r\n          )}\r\n\r\n        {addInheritance ? (\r\n                  <div className=\"add-inheritance-input\">\r\n                    <input\r\n                      type=\"text\"\r\n                      value={newInheritance}\r\n                      onChange={(e) => setNewInheritance(e.target.value)}\r\n                      placeholder=\"Enter prototype model\"\r\n                    />\r\n                    <button onClick={handleSaveInheritance}>Save</button>\r\n                  </div>\r\n                ) : (\r\n                  <button className=\"add-inheritance-button\" onClick={handleAddInheritanceClick}>\r\n                    Add Inherited Prototype\r\n                  </button>\r\n        )}\r\n\r\n        </div>\r\n\r\n        \r\n\r\n        <div className=\"subheader\">Fields</div>\r\n        <ul className=\"fields-list\">\r\n          {prototypeInfo.fields.map((field, index) => (\r\n            <li key={index} className=\"field-item\">\r\n              <p><span>Field ID:</span> {field.id}</p>\r\n              <p><span>Field Type:</span> {field.attributeType}</p>\r\n              {field.constraints && (\r\n                <p><span>Constraints:</span> {field.constraints}</p>\r\n              )}\r\n              {field.alias && (\r\n                <p><span>Alias:</span> {field.alias}</p>\r\n              )}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n        {!isFormVisible && (\r\n          <button className=\"add-field-button\" onClick={handleToggleForm}>\r\n            Add Field\r\n          </button>\r\n        )}\r\n        {isFormVisible && (\r\n          <div className=\"add-field-form\">\r\n            <h3>Add New Field</h3>\r\n            <div className=\"field-input\">\r\n            <label>ID</label>\r\n            <input\r\n              type=\"text\"\r\n              value={newFieldInfo.id}\r\n              onChange={(e) =>\r\n                setNewFieldInfo({ ...newFieldInfo, id: e.target.value })\r\n              }\r\n            />\r\n          </div>\r\n          <div className=\"field-input\">\r\n            <label>Field Group ID</label>\r\n            <input\r\n              type=\"text\"\r\n              value={newFieldInfo.fgId}\r\n              onChange={(e) =>\r\n                setNewFieldInfo({ ...newFieldInfo, fgId: e.target.value })\r\n              }\r\n            />\r\n          </div>\r\n     \r\n           \r\n        \r\n\r\n       \r\n          <div className=\"field-input\">\r\n            <label>Constraint</label>\r\n            <input\r\n              type=\"text\"\r\n              value={newFieldInfo.constraint}\r\n              onChange={(e) =>\r\n                setNewFieldInfo({ ...newFieldInfo, constraint: e.target.value })\r\n              }\r\n            />\r\n          </div>\r\n          <div className=\"field-input\">\r\n            <label>Default Value</label>\r\n            <input\r\n              type=\"text\"\r\n              value={newFieldInfo.defaultValue}\r\n              onChange={(e) =>\r\n                setNewFieldInfo({ ...newFieldInfo, defaultValue: e.target.value })\r\n              }\r\n            />\r\n          </div>   \r\n\r\n          <FormControlLabel control={<Checkbox sx={{ '& .MuiSvgIcon-root': { fontSize: 15 } }}/>} label=\"Value Type\" />\r\n          <FormControlLabel control={<Checkbox sx={{ '& .MuiSvgIcon-root': { fontSize: 15 } }}/>} label=\"Trans\" />\r\n          <FormControlLabel control={<Checkbox sx={{ '& .MuiSvgIcon-root': { fontSize: 15 } }}/>} label=\"Array\" />\r\n          <FormControlLabel control={<Checkbox sx={{ '& .MuiSvgIcon-root': { fontSize: 15 } }}/>} label=\"Map\" />\r\n\r\n              \r\n          <button className=\"save-field-button\" onClick={handleAddField}>\r\n              Save\r\n            </button>\r\n            <button className=\"cancel-field-button\" onClick={handleToggleForm}>\r\n              Cancel\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Prototype;","C:\\Users\\mourt\\react-electron\\src\\ValueContext.js",[],"C:\\Users\\mourt\\react-electron\\src\\AddNamePage.js",[],"C:\\Users\\mourt\\react-electron\\src\\CustomAlert.js",[],"C:\\Users\\mourt\\react-electron\\src\\reportWebVitals.js",[],"C:\\Users\\mourt\\react-electron\\src\\SideMenu.js",["81"],"import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './css/SideMenu.css'; // Make sure to link your CSS file correctly\r\n\r\nfunction SideMenu() {\r\n  const groups = [\r\n    { name: 'Local Prototypes', url: 'http://localhost:8080/getLocal' },\r\n    { name: 'Core Prototypes', url: 'http://localhost:8080/getCore' },\r\n    { name: 'Delta Prototypes', url: 'http://localhost:8080/getDelta' },\r\n  ];\r\n\r\n  const [expandedGroup, setExpandedGroup] = useState(null);\r\n  const [groupData, setGroupData] = useState({});\r\n  const [selectedItems, setSelectedItems] = useState({}); // Track selected items by category\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchData = async (url, index) => {\r\n      try {\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n        const formattedData = data.map(name => ({\r\n          formattedName: name.replace(/([A-Z])/g, ' $1'),\r\n          unformattedName: name,\r\n        }));\r\n        setGroupData(prevData => ({ ...prevData, [index]: formattedData }));\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    };\r\n\r\n    groups.forEach((group, index) => {\r\n      if (expandedGroup === index) {\r\n        fetchData(group.url, index);\r\n      }\r\n    });\r\n  }, [expandedGroup]);\r\n\r\n  const handleGroupClick = (index) => {\r\n    if (expandedGroup === index) {\r\n      setExpandedGroup(null);\r\n    } else {\r\n      setExpandedGroup(index);\r\n    }\r\n  };\r\n\r\n\r\n  const handleItemClick = (groupIndex, itemIndex) => {\r\n    setSelectedItems(prevItems => ({\r\n      ...prevItems,\r\n      [groupIndex]: itemIndex,\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div className=\"side-menu\">      \r\n      {groups.map((group, groupIndex) => (\r\n        <div key={groupIndex} className=\"category\" >\r\n          <div\r\n            className={`category-name ${expandedGroup === groupIndex ? 'expanded' : ''}`}\r\n            onClick={() => handleGroupClick(groupIndex)}\r\n          >\r\n            {group.name}\r\n          </div>\r\n          {expandedGroup === groupIndex && (\r\n            <div className=\"category-content\">\r\n              {groupData[groupIndex] && (\r\n                <div className=\"content-scroll\"> {/* Add a new div for scrolling */}\r\n                  <div>\r\n                    {groupData[groupIndex].map((prototype, itemIndex) => {\r\n                      const formattedGroupName = group.name\r\n                        .toLowerCase()\r\n                        .replace(/\\s+/g, '')\r\n                        .replace('prototypes', '');\r\n                      const fullPath = `/prototype/${formattedGroupName}/${prototype.unformattedName}`;\r\n                      return (\r\n                        <Link\r\n                          to={fullPath}\r\n                          key={`${groupIndex}-${itemIndex}`}\r\n                          className={`menu-link ${\r\n                            selectedItems[groupIndex] === itemIndex ? 'selected' : ''}`} // Add class for selected item\r\n                          onClick={() => handleItemClick(groupIndex, itemIndex)} // Handle item click\r\n                        >\r\n                          <div>{prototype.formattedName}</div>\r\n                        </Link>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SideMenu;\r\n",{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","severity":1,"message":"87","line":57,"column":9,"nodeType":"88","messageId":"89","endLine":57,"endColumn":15},{"ruleId":"86","severity":1,"message":"90","line":58,"column":9,"nodeType":"88","messageId":"89","endLine":58,"endColumn":15},{"ruleId":"86","severity":1,"message":"91","line":60,"column":24,"nodeType":"88","messageId":"89","endLine":60,"endColumn":39},{"ruleId":"86","severity":1,"message":"92","line":63,"column":9,"nodeType":"88","messageId":"89","endLine":63,"endColumn":22},{"ruleId":"82","replacedBy":"93"},{"ruleId":"84","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":35,"column":6,"nodeType":"97","endLine":35,"endColumn":21,"suggestions":"98"},{"ruleId":"86","severity":1,"message":"99","line":7,"column":8,"nodeType":"88","messageId":"89","endLine":7,"endColumn":17},{"ruleId":"100","severity":1,"message":"101","line":32,"column":21,"nodeType":"102","messageId":"103","endLine":32,"endColumn":23},{"ruleId":"104","severity":1,"message":"105","line":33,"column":32,"nodeType":"102","messageId":"106","endLine":33,"endColumn":33},{"ruleId":"100","severity":1,"message":"101","line":56,"column":21,"nodeType":"102","messageId":"103","endLine":56,"endColumn":23},{"ruleId":"104","severity":1,"message":"105","line":57,"column":32,"nodeType":"102","messageId":"106","endLine":57,"endColumn":33},{"ruleId":"100","severity":1,"message":"101","line":87,"column":21,"nodeType":"102","messageId":"103","endLine":87,"endColumn":23},{"ruleId":"104","severity":1,"message":"105","line":88,"column":32,"nodeType":"102","messageId":"106","endLine":88,"endColumn":33},{"ruleId":"100","severity":1,"message":"101","line":110,"column":24,"nodeType":"102","messageId":"103","endLine":110,"endColumn":26},{"ruleId":"95","severity":1,"message":"107","line":129,"column":6,"nodeType":"97","endLine":129,"endColumn":32,"suggestions":"108"},{"ruleId":"95","severity":1,"message":"96","line":37,"column":6,"nodeType":"97","endLine":37,"endColumn":21,"suggestions":"109"},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],"no-unused-vars","'onBack' is assigned a value but never used.","Identifier","unusedVar","'onOpen' is assigned a value but never used.","'setSearchString' is assigned a value but never used.","'filteredFiles' is assigned a value but never used.",["110"],["111"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'groups'. Either include it or remove the dependency array.","ArrayExpression",["112"],"'FormGroup' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["113"],["114"],"no-global-assign","no-unsafe-negation",{"desc":"115","fix":"116"},{"desc":"117","fix":"118"},{"desc":"115","fix":"119"},"Update the dependencies array to be: [expandedGroup, groups]",{"range":"120","text":"121"},"Update the dependencies array to be: [fetchData, groupName, prototypeName]",{"range":"122","text":"123"},{"range":"124","text":"121"},[1147,1162],"[expandedGroup, groups]",[3908,3934],"[fetchData, groupName, prototypeName]",[1298,1313]]